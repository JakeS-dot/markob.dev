{"version":3,"sources":["../src/bit-rain-column.ts","../src/charamask-engine.ts","../src/matrixx-canvas.ts","../src/index.ts"],"names":["defineBitRainColumn","tag","BitRainColumn","_a","_b","_c","_d","_e","_f","_g","_h","durationAttr","delayAttr","fontSizeAttr","blurAttr","left","dirAttr","bitsColor","rainDisplay","duration","delay","fontSize","blur","direction","displayMode","len","bit","keyframeName","styleElem","idx","spanList","CharamaskEngine","canvas","options","hard","cssW","cssH","dpr","s","i","randChar","ctx","next","cellChanged","dirChanged","tick","t","dt","goingDown","c","rand","d","speed","deltaCells","headRow","k","r","a","w","h","min","max","n","defineMatrixxCanvas","MatrixxCanvas","limitAttr","directionAttr","displayAttr","densityAttr","limit","density","count","columns","col","color","cellSize","tailMin","tailMax","defineMatrixx"],"mappings":"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","file":"chunk-DHJRUIQA.js","sourcesContent":["/**\r\n * defineBitRainColumn(tag) function that constructs:\r\n * <bit-rain-column> Web Component\r\n *\r\n * Attributes:\r\n *  - left:         string   (e.g. \"20vw\")\r\n *  - duration:     number   (animation duration in seconds)\r\n *  - delay:        number   (animation delay in seconds)\r\n *  - font-size:    number   (font size in px)\r\n *  - blur:         number   (blur level in px)\r\n *  - direction:    \"up\" | \"down\"   (default: \"up\")\r\n *  - bits-color:   string   (CSS color for the bits, default: \"#00ff00\")\r\n *  - rain-display: \"riverflow\" | \"waterfall\"  (default: \"riverflow\")\r\n *\r\n *  • \"riverflow\"  ⇒ bits simply translate (no fade), then immediately reset.\r\n *  • \"waterfall\"  ⇒ bits translate and fade out at the very end of each cycle.\r\n *  • \"bitmask\"  ⇒ bits translate and fade out at the very end of each cycle.\r\n */\r\n\r\nimport { BitRainMode } from \"./matrixx-canvas\";\r\n\r\nexport function defineBitRainColumn(tag = 'bit-rain-column') {\r\n  // SSR guard: skip entirely on the server\r\n  if (typeof globalThis === 'undefined') return;\r\n  if (typeof (globalThis as any).HTMLElement === 'undefined') return;\r\n  if (typeof (globalThis as any).customElements === 'undefined') return;\r\n\r\n  if (customElements.get(tag)) return;\r\n  \r\n  class BitRainColumn extends HTMLElement {\r\n    private bits: string[] = [];\r\n    private intervalId?: number;\r\n    private shadow: ShadowRoot;\r\n\r\n    constructor() {\r\n      super();\r\n      this.shadow = this.attachShadow({ mode: 'open' });\r\n    }\r\n\r\n    connectedCallback() {\r\n      // ─── 1. Read attributes & apply defaults ─────────────────────────────\r\n      const durationAttr = this.getAttribute('duration') ?? '10';\r\n      const delayAttr = this.getAttribute('delay') ?? '0';\r\n      const fontSizeAttr = this.getAttribute('font-size') ?? '14';\r\n      const blurAttr = this.getAttribute('blur') ?? '0';\r\n      const left = this.getAttribute('left') ?? '0px';\r\n      const dirAttr = this.getAttribute('direction') ?? 'up';\r\n      const bitsColor = this.getAttribute('bits-color') ?? '#00ff00';\r\n      const rainDisplay = this.getAttribute('rain-display') ?? 'riverflow' as BitRainMode;\r\n\r\n      const duration = Number(durationAttr);\r\n      const delay = Number(delayAttr);\r\n      const fontSize = Number(fontSizeAttr);\r\n      const blur = Number(blurAttr);\r\n      const direction = (dirAttr === 'down') ? 'down' : 'up';\r\n      const displayMode = rainDisplay as BitRainMode;\r\n\r\n      // ─── 2. Generate random bits (array of \"0\"/\"1\") ─────────────────────────\r\n      const len = Math.floor(Math.random() * 20) + 10;\r\n      this.bits = Array.from({ length: len }, () => (Math.random() < 0.5 ? '0' : '1'));\r\n\r\n      // ─── 3. Build the initial <style> + <span class=\"bit\">…</span> layout ──\r\n      this.shadow.innerHTML = `\r\n      <style>\r\n        :host {\r\n          position: absolute;\r\n          ${direction === 'down' ? 'top: 0;' : 'bottom: 0;'}\r\n          left: ${left};\r\n          font-size: ${fontSize}px;\r\n          filter: blur(${blur}px);\r\n          font-family: monospace;\r\n          line-height: 1.1;\r\n          color: ${bitsColor};\r\n          display: flex;\r\n          flex-direction: column;\r\n          /* animation will be injected after layout in RAF */\r\n        }\r\n\r\n        /* ─── 4 built-in keyframes ───────────────────────────────────────────*/\r\n        @keyframes move-up {\r\n          0%   { transform: translateY(100%);  opacity: 1; }\r\n          100% { transform: translateY(-calc(100vh + 100%)); opacity: 1; }\r\n        }\r\n        @keyframes move-down {\r\n          0%   { transform: translateY(-100%); opacity: 1; }\r\n          100% { transform: translateY(calc(100vh + 100%));  opacity: 1; }\r\n        }\r\n        @keyframes waterfall-up {\r\n          0%   { transform: translateY(100%);  opacity: 1; }\r\n          80%  { opacity: 1; }\r\n          100% { transform: translateY(-100%); opacity: 0; }\r\n        }\r\n        @keyframes waterfall-down {\r\n          0%   { transform: translateY(-100%); opacity: 1; }\r\n          80%  { opacity: 1; }\r\n          100% { transform: translateY(100%);  opacity: 0; }\r\n        }\r\n      </style>\r\n\r\n      ${this.bits.map(bit => `<span class=\"bit\">${bit}</span>`).join('')}\r\n    `;\r\n\r\n      // ─── 5. After first paint, actually set the animation on :host ────────\r\n      // Using requestAnimationFrame ensures the browser has computed the height of the spans.\r\n      requestAnimationFrame(() => {\r\n        // Choose which keyframe to use based on (direction, displayMode)\r\n        let keyframeName: string;\r\n        if (displayMode === 'waterfall') {\r\n          keyframeName = (direction === 'down') ? 'waterfall-down' : 'waterfall-up';\r\n        } else {\r\n          // “riverflow”\r\n          keyframeName = (direction === 'down') ? 'move-down' : 'move-up';\r\n        }\r\n\r\n        // Append to the existing style block so we don't overwrite the keyframes themselves.\r\n        const styleElem = this.shadow.querySelector('style')!;\r\n        styleElem.textContent += `\r\n        :host {\r\n          animation: ${keyframeName} ${duration}s linear infinite;\r\n          animation-delay: -${delay}s;\r\n        }\r\n      `;\r\n\r\n        // Start randomizing the bits once per 200ms\r\n        this.startUpdatingBits();\r\n      });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      clearInterval(this.intervalId);\r\n    }\r\n\r\n    private startUpdatingBits() {\r\n      this.intervalId = window.setInterval(() => {\r\n        const idx = Math.floor(Math.random() * this.bits.length);\r\n        this.bits[idx] = (Math.random() < 0.5 ? '0' : '1');\r\n\r\n        const spanList = this.shadow.querySelectorAll<HTMLSpanElement>('.bit');\r\n        if (spanList[idx]) {\r\n          spanList[idx].textContent = this.bits[idx];\r\n        }\r\n      }, 200);\r\n    }\r\n  }\r\n  customElements.define(tag, BitRainColumn);\r\n}\r\n","/**\r\n * CharamaskEngine — Canvas grid “bit rain” (for <matrixx-canvas rain-display=\"charamask\">)\r\n *\r\n * Options (mapped from <matrixx-canvas> attributes):\r\n *  - density:     FLOAT   (0 ~ 10; controls how often columns activate; default: 4)\r\n *  - direction:   \"up\" | \"down\" (default: \"up\")\r\n *  - color:       string  (CSS color for chars; default: \"#00ff00\")\r\n *  - cellSize:    number  (grid cell size in px; default: 18)\r\n *  - speed:       number  (cells per second for the moving head; default: 22)\r\n *  - tailMin:     number  (minimum tail length in cells; default: 6)\r\n *  - tailMax:     number  (maximum tail length in cells; default: 18)\r\n *\r\n * Behavior\r\n *  - Creates a grid over the canvas based on `cellSize` (HiDPI-aware).\r\n *  - Each cell holds a random [A–Z, a–z, 0–9] character with initial opacity 0.\r\n *  - Per column, a “head” moves in `direction` with a random-length tail.\r\n *  - Tail lights cells along its path using a gradient (high → low opacity).\r\n *  - After a tail passes and a cell’s opacity decays back to 0, the cell is\r\n *    re-assigned a new random character.\r\n *  - Column activation frequency scales with `density`. Columns recycle when\r\n *    their tail exits the viewport.\r\n *\r\n * Public API\r\n *  - constructor(canvas: HTMLCanvasElement, options: CharamaskOptions)\r\n *  - attach(canvas: HTMLCanvasElement): void\r\n *  - setOptions(next: CharamaskOptions): void          // hot-update; resizes grid if cellSize changed\r\n *  - start(): void                                     // begins rAF loop; installs resize listener\r\n *  - pause(): void                                     // pauses stepping/drawing (e.g., on hidden tab)\r\n *  - resume(): void\r\n *  - stop(): void                                      // cancels rAF; removes listeners\r\n *\r\n */\r\n\r\n\r\ntype Dir = 'up' | 'down';\r\nexport type CharamaskOptions = {\r\n    direction: Dir;          // up/down\r\n    color: string;           // RGBA/hex\r\n    density: number;         // 0..10 → OVERDRIVE when limit breaks\r\n    cellSize: number;        // px\r\n    speed: number;           // cells / second\r\n    tailMin: number;         // cells\r\n    tailMax: number;         // cells\r\n};\r\n\r\nexport class CharamaskEngine {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx!: CanvasRenderingContext2D;\r\n    private opts: CharamaskOptions;\r\n    private raf: number | null = null;\r\n    private paused = false;\r\n    private dpr = 1;\r\n\r\n    // grid state\r\n    private cols = 0;\r\n    private rows = 0;\r\n    private chars!: string[];        // length = cols*rows\r\n    private alpha!: Float32Array;    // per-cell current alpha (0..1)\r\n    private active!: boolean[];      // is cell “owned” by a passing tail this frame\r\n\r\n    // streaks: one head per active column (can respawn)\r\n    private heads: number[] = [];    // row index (float), per column\r\n    private tails: number[] = [];    // tail length (cells), per column\r\n    private activeCols: boolean[] = [];\r\n\r\n    private last = 0;\r\n\r\n    constructor(canvas: HTMLCanvasElement, options: CharamaskOptions) {\r\n        this.canvas = canvas;\r\n        this.opts = options;\r\n        this.attach(canvas);\r\n    }\r\n\r\n    private onWindowResize = () => this.resize(false);\r\n\r\n    attach(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n        const ctx = this.canvas.getContext('2d');\r\n        if (!ctx) throw new Error('2d context not available');\r\n        this.ctx = ctx;\r\n        this.resize(true);\r\n    }\r\n\r\n    setOptions(next: CharamaskOptions) {\r\n        // hot-apply where possible\r\n        const cellChanged = next.cellSize !== this.opts.cellSize;\r\n        const dirChanged = next.direction !== this.opts.direction;\r\n        this.opts = { ...this.opts, ...next };\r\n        if (cellChanged) this.resize(true);\r\n        if (dirChanged) this.seedStreaks(); // reset heads to match flow\r\n    }\r\n\r\n    start() {\r\n        if (this.raf !== null) return;\r\n        this.last = performance.now();\r\n        const tick = (t: number) => {\r\n            if (this.paused) { this.last = t; this.raf = requestAnimationFrame(tick); return; }\r\n            const dt = Math.min(80, t - this.last) / 1000; // clamp\r\n            this.step(dt);\r\n            this.draw();\r\n            this.last = t;\r\n            this.raf = requestAnimationFrame(tick);\r\n        };\r\n        this.raf = requestAnimationFrame(tick);\r\n\r\n        // auto-resize\r\n        addEventListener('resize', this.onWindowResize);\r\n    }\r\n\r\n    pause() { this.paused = true; }\r\n    resume() { this.paused = false; }\r\n    stop() { if (this.raf !== null) cancelAnimationFrame(this.raf); this.raf = null; removeEventListener('resize', this.onWindowResize); }\r\n\r\n    // ---------- internals ----------\r\n    private resize = (hard = false) => {\r\n        const cssW = this.canvas.clientWidth || this.canvas.getBoundingClientRect().width || innerWidth;\r\n        const cssH = this.canvas.clientHeight || this.canvas.getBoundingClientRect().height || innerHeight;\r\n        const dpr = Math.max(1, Math.floor(devicePixelRatio || 1));\r\n        if (!hard && this.canvas.width === Math.floor(cssW * dpr) && this.canvas.height === Math.floor(cssH * dpr) && this.dpr === dpr) return;\r\n\r\n        this.dpr = dpr;\r\n        this.canvas.width = Math.max(1, Math.floor(cssW * dpr));\r\n        this.canvas.height = Math.max(1, Math.floor(cssH * dpr));\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this.ctx.scale(dpr, dpr);\r\n\r\n        // grid geometry\r\n        const s = Math.max(8, this.opts.cellSize);\r\n        this.cols = Math.max(1, Math.floor(cssW / s));\r\n        this.rows = Math.max(1, Math.floor(cssH / s));\r\n\r\n        // allocate\r\n        this.chars = new Array(this.cols * this.rows);\r\n        this.alpha = new Float32Array(this.cols * this.rows);\r\n        this.active = new Array(this.cols * this.rows).fill(false);\r\n\r\n        // init chars + streaks\r\n        for (let i = 0; i < this.chars.length; i++) this.chars[i] = randChar();\r\n        this.seedStreaks();\r\n    };\r\n\r\n    private seedStreaks() {\r\n        this.heads = new Array(this.cols).fill(0);\r\n        this.tails = new Array(this.cols).fill(0);\r\n        this.activeCols = new Array(this.cols).fill(false);\r\n\r\n        const goingDown = this.opts.direction === 'down';\r\n        for (let c = 0; c < this.cols; c++) {\r\n            this.heads[c] = goingDown ? -rand(0, this.rows) : this.rows + rand(0, this.rows);\r\n            this.tails[c] = Math.floor(rand(this.opts.tailMin, this.opts.tailMax + 1));\r\n            this.activeCols[c] = Math.random() < this.activationProb(); // initial chance\r\n        }\r\n    }\r\n\r\n    private activationProb() {\r\n        // map density 0..10 to probability per column per “cycle”\r\n        // gentle curve: p = 0.06 + 0.08 * (density/10)^0.9\r\n        const d = Math.max(0, Math.min(10, this.opts.density));\r\n        return 0.06 + 0.08 * Math.pow(d / 10, 0.9);\r\n    }\r\n\r\n    private step(dt: number) {\r\n        const { speed, direction } = this.opts;\r\n        const cellsPerSec = Math.max(1, speed);\r\n        const deltaCells = cellsPerSec * dt;\r\n\r\n        // decay alphas\r\n        for (let i = 0; i < this.alpha.length; i++) {\r\n            if (!this.active[i] && this.alpha[i] > 0) {\r\n                this.alpha[i] = Math.max(0, this.alpha[i] - 1.2 * dt); // decay rate\r\n                if (this.alpha[i] === 0) this.chars[i] = randChar();   // reassign when fully off\r\n            }\r\n            this.active[i] = false; // reset mark; will be set below if lit this frame\r\n        }\r\n\r\n        // advance heads and light tails\r\n        const goingDown = direction === 'down';\r\n        for (let c = 0; c < this.cols; c++) {\r\n            if (!this.activeCols[c]) {\r\n                // chance to (re)activate this column\r\n                if (Math.random() < this.activationProb() * dt) {\r\n                    this.activeCols[c] = true;\r\n                    this.tails[c] = Math.floor(rand(this.opts.tailMin, this.opts.tailMax + 1));\r\n                    this.heads[c] = goingDown ? -1 : this.rows + 1;\r\n                } else continue;\r\n            }\r\n\r\n            // move head\r\n            this.heads[c] += goingDown ? deltaCells : -deltaCells;\r\n\r\n            // compute integer head position\r\n            const headRow = Math.floor(this.heads[c]);\r\n            const len = this.tails[c];\r\n\r\n            // light tail cells\r\n            for (let k = 0; k < len; k++) {\r\n                const r = goingDown ? (headRow - k) : (headRow + k);\r\n                if (r < 0 || r >= this.rows) continue;\r\n                const idx = r * this.cols + c;\r\n                const t = k / len;               // tail progress (0 at head → 1 at end)\r\n                const a = 1 - t * t;             // ease-out for nicer gradient\r\n                this.alpha[idx] = Math.max(this.alpha[idx], a);\r\n                this.active[idx] = true;\r\n            }\r\n\r\n            // recycle when fully offscreen\r\n            if (goingDown && headRow - len > this.rows) {\r\n                this.activeCols[c] = false;\r\n            } else if (!goingDown && headRow + len < 0) {\r\n                this.activeCols[c] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private draw() {\r\n        const w = this.canvas.width / this.dpr;\r\n        const h = this.canvas.height / this.dpr;\r\n        const s = Math.max(8, this.opts.cellSize);\r\n\r\n        this.ctx.clearRect(0, 0, w, h);\r\n        this.ctx.fillStyle = this.opts.color;\r\n        this.ctx.textBaseline = 'top';\r\n        this.ctx.font = `${Math.floor(s)}px ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", monospace`;\r\n\r\n        // draw visible cells\r\n        for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n                const i = r * this.cols + c;\r\n                const a = this.alpha[i];\r\n                if (a <= 0) continue;\r\n                this.ctx.globalAlpha = a;\r\n                this.ctx.fillText(this.chars[i], c * s, r * s);\r\n            }\r\n        }\r\n        this.ctx.globalAlpha = 1;\r\n    }\r\n}\r\n\r\n// here's helpers~\r\nfunction rand(min: number, max: number) { return Math.random() * (max - min) + min; }\r\nfunction randChar(): string {\r\n    const n = Math.floor(Math.random() * 62);\r\n    if (n < 10) return String.fromCharCode(48 + n);         // 0-9\r\n    if (n < 36) return String.fromCharCode(65 + (n - 10));   // A-Z\r\n    return String.fromCharCode(97 + (n - 36));               // a-z\r\n}\r\n","/**\r\n * defineMatrixxCanvas(tag) function that constructs:\r\n * <matrixx-canvas> Web Component\r\n *\r\n * Attributes:\r\n *  - density:      FLOAT   (0 ~ 10, controls how many columns to render)\r\n *  - limit:        boolean (optional; default=true). When false, density can exceed 10.  \r\n *  - direction:    \"up\" | \"down\" (default: \"up\")\r\n *  - bits-color:   string  (CSS color for bits; default: \"#00ff00\")\r\n *  - rain-display: \"riverflow\" | \"waterfall\" (default: \"riverflow\")\r\n *\r\n * This component spawns multiple <bit-rain-column> children with random\r\n * “left”, “duration”, “delay”, “font-size”, and “blur” attributes. \r\n * Passing `rain-display=\"waterfall\"` causes each column to fade-out at the end;\r\n * otherwise, columns use the default “riverflow” (instant reset).\r\n */\r\n\r\nimport './bit-rain-column';\r\nimport { CharamaskEngine, CharamaskOptions } from './charamask-engine';\r\n\r\nexport type BitRainMode = \"waterfall\" | \"riverflow\" | \"charamask\";\r\n\r\nexport function defineMatrixxCanvas(tag = 'matrixx-canvas') {\r\n  if (typeof window === 'undefined' || typeof customElements === 'undefined') return;\r\n  if (customElements.get(tag)) return;\r\n  class MatrixxCanvas extends HTMLElement {\r\n    private shadow: ShadowRoot;\r\n    private chara?: CharamaskEngine;\r\n    static get observedAttributes() {\r\n      return ['density', 'limit', 'direction', 'bits-color', 'rain-display',\r\n        'cell-size', 'speed', 'tail-min', 'tail-max'];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.shadow = this.attachShadow({ mode: 'open' });\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.render();\r\n    }\r\n\r\n    attributeChangedCallback() {\r\n      // hot-update when possible\r\n      const mode = (this.getAttribute('rain-display') ?? 'riverflow') as BitRainMode;\r\n      if (mode === 'charamask' && this.chara) {\r\n        this.chara.setOptions(this.readCharamaskOptions());\r\n      } else {\r\n        // for DOM modes, a cheap rebuild is fine\r\n        this.render();\r\n      }\r\n    }\r\n\r\n    private render() {\r\n      const mode = (this.getAttribute('rain-display') ?? 'riverflow') as BitRainMode;\r\n\r\n      /** ==== For charamask theme ============================= */\r\n\r\n      if (mode === 'charamask') {\r\n        // clear existing DOM children (columns) if any\r\n        this.shadow.innerHTML = `\r\n        <style>\r\n          :host {\r\n            position: fixed; inset: 0;\r\n            width: 100vw; height: 100vh;\r\n            overflow: hidden; z-index: 0; pointer-events: none;\r\n          }\r\n          canvas { width: 100%; height: 100%; display:block; }\r\n        </style>\r\n        <canvas part=\"canvas\"></canvas>\r\n      `;\r\n        const canvas = this.shadow.querySelector('canvas') as HTMLCanvasElement;\r\n        // start/update engine\r\n        if (!this.chara) {\r\n          this.chara = new CharamaskEngine(canvas, this.readCharamaskOptions());\r\n          this.chara.start();\r\n          // pause on hidden\r\n          document.addEventListener('visibilitychange', () => {\r\n            if (!this.chara) return;\r\n            if (document.hidden) this.chara.pause(); else this.chara.resume();\r\n          });\r\n        } else {\r\n          this.chara.attach(canvas);\r\n          this.chara.setOptions(this.readCharamaskOptions());\r\n        }\r\n        return;\r\n      }\r\n\r\n      /** ==== For classic columns-based theme ============================= */\r\n\r\n      // ─── 1. Read & normalize attributes ───────────────────────────────────\r\n      const limitAttr = this.getAttribute('limit');\r\n      const directionAttr = this.getAttribute('direction');\r\n      const bitsColor = this.getAttribute('bits-color') ?? '#00ff00';\r\n      const displayAttr = this.getAttribute('rain-display') ?? 'riverflow';\r\n      const densityAttr = this.getAttribute('density') ?? '4';\r\n\r\n      const direction = (directionAttr === 'down') ? 'down' : 'up';\r\n      const rainDisplay = displayAttr as BitRainMode;\r\n      const limit = (limitAttr === null || limitAttr === 'true' || limitAttr === '1');\r\n\r\n      let density = parseFloat(densityAttr.trim());\r\n      if (isNaN(density)) {\r\n        console.warn(`[MatrixxCanvas] invalid density (“${densityAttr}”). Defaulting to 4.`);\r\n        density = 4;\r\n      }\r\n      if (limit && (density < 0 || density > 10)) {\r\n        console.warn(`[MatrixxCanvas] density must be between 0 and 10 when limit=true. Got: ${densityAttr}. Resetting to 4.`);\r\n        density = 4;\r\n      }\r\n\r\n      // ─── 2. Compute how many columns spawn ───────────────────────────\r\n      const count = Math.floor(1 + density * 20);\r\n      if (!limit && count > 320) {\r\n        console.warn(`[MatrixxCanvas] rain-display=\"riverflow\", but ${count} columns may be too many for performance.`);\r\n      }\r\n\r\n      // ─── 3. Build an array of per-column random parameters ─────────────────\r\n      const columns = Array.from({ length: count }, () => ({\r\n        left: `${Math.random() * 100}vw`,\r\n        duration: 5 + Math.random() * 5, // between 5s and 10s\r\n        delay: Math.random() * 10,     // random start offset\r\n        fontSize: 10 + Math.random() * 18, // between 10px and 28px\r\n        blur: Math.random() * 2       // up to 2px blur\r\n      }));\r\n\r\n      // ─── 4. Inject the container style and spawn <bit-rain-column> tags ────\r\n      // Pass `rain-display=\"${rainDisplay}\"` down to each child.\r\n      this.shadow.innerHTML = `\r\n      <style>\r\n        :host {\r\n          position: fixed;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100vw;\r\n          height: 100vh;\r\n          overflow: hidden;\r\n          z-index: 0; \r\n          pointer-events: none;\r\n        }\r\n      </style>\r\n\r\n      ${columns.map(col => `\r\n        <bit-rain-column\r\n          left=\"${col.left}\"\r\n          duration=\"${col.duration}\"\r\n          delay=\"${col.delay}\"\r\n          font-size=\"${col.fontSize}\"\r\n          blur=\"${col.blur}\"\r\n          direction=\"${direction}\"\r\n          bits-color=\"${bitsColor}\"\r\n          rain-display=\"${rainDisplay}\"\r\n        ></bit-rain-column>\r\n      `).join('\\n')}\r\n    `;\r\n    }\r\n\r\n    private readCharamaskOptions(): CharamaskOptions {\r\n      const direction = (this.getAttribute('direction') === 'down') ? 'down' : 'up';\r\n      const color = this.getAttribute('bits-color') ?? '#00ff00';\r\n      const densityAttr = this.getAttribute('density') ?? '4';\r\n      let density = parseFloat(densityAttr);\r\n      if (isNaN(density)) density = 4;\r\n      const limitAttr = this.getAttribute('limit');\r\n      const limit = (limitAttr === null || limitAttr === 'true' || limitAttr === '1');\r\n      if (limit) density = Math.max(0, Math.min(10, density));\r\n\r\n      const cellSize = parseInt(this.getAttribute('cell-size') ?? '18', 10);\r\n      const speed = parseFloat(this.getAttribute('speed') ?? '22'); // cells/sec\r\n      const tailMin = parseInt(this.getAttribute('tail-min') ?? '6', 10);\r\n      const tailMax = parseInt(this.getAttribute('tail-max') ?? '18', 10);\r\n\r\n      return { direction, color, density, cellSize, speed, tailMin, tailMax };\r\n    }\r\n  }\r\n  customElements.define(tag, MatrixxCanvas);\r\n}\r\n","// src/index.ts\r\n//\r\n// This “entry” point is what users will import in order to\r\n// register *all* of Web Components in one go.\r\n//\r\n\r\nimport { defineBitRainColumn } from './bit-rain-column';\r\nimport { defineMatrixxCanvas } from './matrixx-canvas';\r\n\r\n// Public attribute typings (string | number unions are friendly to HTML)\r\nexport type MatrixxCanvasAttributes = {\r\n    'rain-display'?: 'riverflow' | 'waterfall' | 'charamask';\r\n    direction?: 'up' | 'down';\r\n    density?: number | `${number}`;\r\n    'cell-size'?: number | `${number}`;\r\n    speed?: number | `${number}`;\r\n    'tail-min'?: number | `${number}`;\r\n    'tail-max'?: number | `${number}`;\r\n    'bits-color'?: string;\r\n    limit?: boolean | 'true' | 'false';\r\n};\r\n\r\nexport function defineMatrixx(tag = 'matrixx-canvas') {\r\n    // SSR guard\r\n    if (typeof window === 'undefined' || typeof customElements === 'undefined') return;\r\n\r\n    // Defines\r\n    defineBitRainColumn();\r\n    defineMatrixxCanvas();\r\n}\r\n\r\nexport { };\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'matrixx-canvas': {\r\n                'rain-display'?: 'riverflow' | 'waterfall' | 'charamask';\r\n                direction?: 'up' | 'down';\r\n                density?: number | `${number}`;\r\n                'cell-size'?: number | `${number}`;\r\n                speed?: number | `${number}`;\r\n                'tail-min'?: number | `${number}`;\r\n                'tail-max'?: number | `${number}`;\r\n                'bits-color'?: string;\r\n                limit?: boolean | 'true' | 'false';\r\n                [k: string]: any;\r\n            };\r\n        }\r\n    }\r\n    interface HTMLElementTagNameMap {\r\n        'matrixx-canvas': HTMLElement;\r\n        'bit-rain-column': HTMLElement;\r\n    }\r\n}\r\n"]}