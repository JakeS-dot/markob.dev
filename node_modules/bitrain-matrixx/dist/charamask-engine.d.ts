/**
 * CharamaskEngine — Canvas grid “bit rain” (for <matrixx-canvas rain-display="charamask">)
 *
 * Options (mapped from <matrixx-canvas> attributes):
 *  - density:     FLOAT   (0 ~ 10; controls how often columns activate; default: 4)
 *  - direction:   "up" | "down" (default: "up")
 *  - color:       string  (CSS color for chars; default: "#00ff00")
 *  - cellSize:    number  (grid cell size in px; default: 18)
 *  - speed:       number  (cells per second for the moving head; default: 22)
 *  - tailMin:     number  (minimum tail length in cells; default: 6)
 *  - tailMax:     number  (maximum tail length in cells; default: 18)
 *
 * Behavior
 *  - Creates a grid over the canvas based on `cellSize` (HiDPI-aware).
 *  - Each cell holds a random [A–Z, a–z, 0–9] character with initial opacity 0.
 *  - Per column, a “head” moves in `direction` with a random-length tail.
 *  - Tail lights cells along its path using a gradient (high → low opacity).
 *  - After a tail passes and a cell’s opacity decays back to 0, the cell is
 *    re-assigned a new random character.
 *  - Column activation frequency scales with `density`. Columns recycle when
 *    their tail exits the viewport.
 *
 * Public API
 *  - constructor(canvas: HTMLCanvasElement, options: CharamaskOptions)
 *  - attach(canvas: HTMLCanvasElement): void
 *  - setOptions(next: CharamaskOptions): void          // hot-update; resizes grid if cellSize changed
 *  - start(): void                                     // begins rAF loop; installs resize listener
 *  - pause(): void                                     // pauses stepping/drawing (e.g., on hidden tab)
 *  - resume(): void
 *  - stop(): void                                      // cancels rAF; removes listeners
 *
 */
type Dir = 'up' | 'down';
export type CharamaskOptions = {
    direction: Dir;
    color: string;
    density: number;
    cellSize: number;
    speed: number;
    tailMin: number;
    tailMax: number;
};
export declare class CharamaskEngine {
    private canvas;
    private ctx;
    private opts;
    private raf;
    private paused;
    private dpr;
    private cols;
    private rows;
    private chars;
    private alpha;
    private active;
    private heads;
    private tails;
    private activeCols;
    private last;
    constructor(canvas: HTMLCanvasElement, options: CharamaskOptions);
    private onWindowResize;
    attach(canvas: HTMLCanvasElement): void;
    setOptions(next: CharamaskOptions): void;
    start(): void;
    pause(): void;
    resume(): void;
    stop(): void;
    private resize;
    private seedStreaks;
    private activationProb;
    private step;
    private draw;
}
export {};
